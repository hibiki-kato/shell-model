/**
 * @file Map.hpp
 * @author Hibiki Kato
 * @brief header of Maps(including poincare(&lorenz) map)
 * @version 0.1
 * @date 2023-12-26
 * 
 * @copyright Copyright (c) 2023
 * )
 */
#pragma once
#include <eigen3/Eigen/Dense>
#include <set>
#include <vector>


/*
████████               ██                                                 ███        ███
█████████              ██                                                 ████       ███
██      ██                                                                ████       ███
██      ██                                                                ████      ████
██      ██    █████    ██   ██ ████     ████      ████    ██ ██   ████    ██ ██     ████     ████    ██ ████
██      ██   ███████   ██   ████████   ███████   ███ ██   █████  ███████  ██ ██     █ ██    ███ ██   ████████
██     ███  ██    ███  ██   ██    ██  ██    ██  ██    ██  ██    ██    ██  ██  █    ██ ██   ██    ██  ██    ██
█████████   ██     ██  ██   ██    ██  ██     █        ██  ██    ██     █  ██  ██   ██ ██         ██  ██     ██
██████      ██     ██  ██   ██    ██  ██          ██████  ██    ████████  ██  ██  ██  ██     ██████  ██     ██
██          ██     ██  ██   ██    ██  ██        ███   ██  ██    ██        ██   ██ ██  ██   ███   ██  ██     ██
██          ██     ██  ██   ██    ██  ██        ██    ██  ██    ██        ██   ██ █   ██   ██    ██  ██     ██
██          ██    ███  ██   ██    ██  ██    ██  ██    ██  ██    ██        ██    ███   ██   ██    ██  ██    ██
██           ███████   ██   ██    ██   ███████  ████████  ██     ███████  ██    ███   ██   ████████  ████████
██            █████    ██   ██    ██    ████     ████ ██  ██      █████   ██    ██    ██    ████ ██  ██ ████
                                                                                                     ██
                                                                                                     ██
                                                                                                     ██
                                                                                                     ██
*/

struct PoincareMap{
    PoincareMap(const Eigen::MatrixXd& input_trajectory);
    ~PoincareMap();
    void locmax(int dim);
    void locmin(int dim);
    void poincare_section(int dim, double value);
    Eigen::MatrixXd get();
    Eigen::MatrixXd trajectory;
    std::vector<std::set<long long>> indices;
};

/*
██      ██                                       ██   ██             ██        ███        ███
██     ██                                        ██   ██             ██        ████       ███
██    ██                          ██             ██                  ██        ████       ███
██   ███                          ██             ██                  ██        ████      ████
██   ██       █████      ████   ██████   ████    ██   ██     ████    ██ ████   ██ ██     ████     ████    ██ ████
██  ██       ███████    ██████    ██    ███████  ██   ██    ███████  ████████  ██ ██     █ ██    ███ ██   ████████
██████      ██    ███  ██    ██   ██   ██    ██  ██   ██   ██    ██  ██    ██  ██  █    ██ ██   ██    ██  ██    ██
██████      ██     ██  ██         ██   ██     █  ██   ██   ██     █  ██    ██  ██  ██   ██ ██         ██  ██     ██
███  ██     ██     ██   ████      ██   ████████  ██   ██   ██        ██    ██  ██  ██  ██  ██     ██████  ██     ██
██    ██    ██     ██     ████    ██   ██        ██   ██   ██        ██    ██  ██   ██ ██  ██   ███   ██  ██     ██
██    ██    ██     ██        ██   ██   ██        ██   ██   ██        ██    ██  ██   ██ █   ██   ██    ██  ██     ██
██     ██   ██    ███  ██    ██   ██   ██        ██   ██   ██    ██  ██    ██  ██    ███   ██   ██    ██  ██    ██
██      ██   ███████   ███████    ███   ███████  ██   ██    ███████  ██    ██  ██    ███   ██   ████████  ████████
██      ███   █████      ████      ███   █████   ██   ██     ████    ██    ██  ██    ██    ██    ████ ██  ██ ████
                                                                                                          ██
                                                                                                          ██
                                                                                                          ██
                                                                                                          ██
*/
struct KMparams{
    double alpha;
    double sigma;
};

struct KostelichMap{
    KostelichMap(KMparams input_params, long long input_n, long long input_dump, Eigen::VectorXd input_x_0);
    ~KostelichMap();
    Eigen::MatrixXd get_trajectory();
    Eigen::VectorXd kostelich_map(const Eigen::VectorXd& state);
    Eigen::MatrixXd jacobi_matrix(const Eigen::VectorXd& state);
    double alpha;
    double sigma;
    long long n;
    long long dump;
    Eigen::VectorXd x_0;
};

/*
████████    ██   ██                                      ██                         █████                                         ██                                                    ███        ███
█████████   ██   ██                                      ██                        ███████                                        ██                                                    ████       ███
██      ██       ██                                      ██                       ██     ██                                       ██                                                    ████       ███
██      ██       ██                                      ██                       ██     ██                                       ██                                                    ████      ████
██      ██  ██   ██    ██    █████   ██     ██   ████    ██    ██ ██     ██      ██           ██ ██   ████      ████      ████    ██ ████      ████    ██ ██   ████ █     ████    ██ ██ ██ ██     ████     ████    ██ ████
██      ██  ██   ██   ██    ███████   ██    █   ██████   ██   ██   ██   ██       ██           █████  ███ ██    ██████    ██████   ████████    ███████  █████  ███████    ███████  █████ ██ ██     █ ██    ███ ██   ████████
██     ███  ██   ██  ██    ██    ███  ██   ██  ██    ██  ██  ██    ██   ██       ██           ██    ██    ██  ██    ██  ██    ██  ██    ██   ██    ██  ██    ██    ██   ██    ██  ██    ██  █    ██ ██   ██    ██  ██    ██
█████████   ██   ██ ██     ██     ██   █   ██  ██        ██ ██     ██   ██       ██    █████  ██          ██  ██        ██        ██     ██  ██     █  ██    ██     █   ██     █  ██    ██  ██   ██ ██         ██  ██     ██
██████      ██   █████     ██     ██   ██  █    ████     █████      ██ ██  █████ ██    █████  ██      ██████   ████      ████     ██     ██  ████████  ██    ██     █   ████████  ██    ██  ██  ██  ██     ██████  ██     ██
██          ██   █████     ██     ██   ██ ██      ████   █████      ██ ██        ██       ██  ██    ███   ██     ████      ████   ██     ██  ██        ██    ██     █   ██        ██    ██   ██ ██  ██   ███   ██  ██     ██
██          ██   ██  ██    ██     ██    █ ██         ██  ██  ██     ██ ██         ██      ██  ██    ██    ██        ██        ██  ██     ██  ██        ██    ██     █   ██        ██    ██   ██ █   ██   ██    ██  ██     ██
██          ██   ██   ██   ██    ███    ███    ██    ██  ██   ██     ███          ██      ██  ██    ██    ██  ██    ██  ██    ██  ██    ██   ██        ██    ██    ██   ██        ██    ██    ███   ██   ██    ██  ██    ██
██          ██   ██   ███   ███████     ███    ███████   ██   ███    ███           ████████   ██    ████████  ███████   ███████   ████████    ███████  ██     ███████    ███████  ██    ██    ███   ██   ████████  ████████
██          ██   ██    ██    █████       █       ████    ██    ██     █             ██████    ██     ████ ██    ████      ████    ██ ████      █████   ██      ██████     █████   ██    ██    ██    ██    ████ ██  ██ ████
                                                                     ██                                                                                            ██                                              ██
                                                                     ██                                                                                       █    ██                                              ██
                                                                   ███                                                                                        ███████                                              ██
                                                                   ██                                                                                          ████                                                ██
*/

struct PGparams{
    double a;
    double a_prime;
    double omega;
}

struct PGMap{
    PGMap(PGparams input_params, long long input_n, long long input_dump, Eigen::VectorXd input_x_0);
    ~PGMap();
    Eigen::MatrixXd get_trajectory();
    Eigen::VectorXd PG_map(const Eigen::VectorXd& state);
    double tent_map(const double x, double r);
    Eigen::MatrixXd jacobi_matrix(const Eigen::VectorXd& state);
    double a;
    double a_prime;
    double omega;
    long long n;
    long long dump;
    Eigen::VectorXd x_0;
};